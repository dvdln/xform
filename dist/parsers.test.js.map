{"version":3,"sources":["../lib/parsers.test.js"],"names":["example","noDefault","value","unusedDefault","usedDefault","undefDefault","transformed","t","deepEqual","undefined","exclude","deep","memo","shallow","memoValue","root","path","sub","template"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,mBAAK,WAAL,EAAkB,aAAK;AACrB,MAAMA,UAAU,qBAAM;AACpBC,eAAW,gBAAMC,KAAN,EADS;AAEpBC,mBAAe,gBAAMD,KAAN,CAAY,GAAZ,CAFK;AAGpBE,iBAAa,gBAAMF,KAAN,CAAY,GAAZ,CAHO;AAIpBG,kBAAc,gBAAMH,KAAN;AAJM,GAAN,CAAhB;;AAOA,MAAMI,cAAcN,QAAQ;AAC1BC,eAAW,GADe;AAE1BE,mBAAe;AAFW,GAAR,CAApB;;AAKAI,IAAEC,SAAF,CAAYF,WAAZ,EAAyB;AACvBL,eAAW,GADY;AAEvBE,mBAAe,GAFQ;AAGvBC,iBAAa,GAHU;AAIvBC,kBAAcI;AAJS,GAAzB;AAMD,CAnBD;;AAqBA,mBAAK,kBAAL,EAAyB,aAAK;AAC5B,MAAMT,UAAU,qBAAM;AACpBU,aAAS,gBAAMA,OAAN,CAAc;AACrBC,YAAM;AACJT,eAAO,gBAAMU,IAAN,CAAW,WAAX;AADH;AADe,KAAd,CADW;AAMpBC,aAAS,gBAAMC,SAAN,CAAgB,WAAhB;AANW,GAAN,CAAhB;;AASA,MAAMR,cAAcN,QAAQ;AAC1BU,aAAS;AACPC,YAAM;AACJT,eAAO;AADH;AADC;AADiB,GAAR,CAApB;;AAQAK,IAAEC,SAAF,CAAYF,WAAZ,EAAyB;AACvBO,aAAS;AADc,GAAzB;AAGD,CArBD;;AAuBA,mBAAK,UAAL,EAAiB,aAAK;AACpB,MAAMb,UAAU,qBAAM;AACpBe,UAAM,gBAAMC,IAAN,CAAW,cAAX;AADc,GAAN,CAAhB;;AAIA,MAAMV,cAAcN,QAAQ;AAC1Be,UAAM;AACJJ,YAAM;AACJT,eAAO;AADH;AADF;AADoB,GAAR,CAApB;;AAQAK,IAAEC,SAAF,CAAYF,WAAZ,EAAyB;AACvBS,UAAM;AADiB,GAAzB;AAGD,CAhBD;;AAkBA,mBAAK,uBAAL,EAA8B,aAAK;AACjC,MAAMf,UAAU,qBAAM;AACpBe,UAAM,gBAAMC,IAAN,CAAW,cAAX,EAA2B;AAC/BC,WAAK,gBAAMD,IAAN,CAAW,YAAX;AAD0B,KAA3B;AADc,GAAN,CAAhB;;AAMA,MAAMV,cAAcN,QAAQ;AAC1Be,UAAM;AACJJ,YAAM;AACJT,eAAO;AACLe,eAAK;AACHC,sBAAU;AADP;AADA;AADH;AADF;AADoB,GAAR,CAApB;;AAYAX,IAAEC,SAAF,CAAYF,WAAZ,EAAyB;AACvBS,UAAM;AACJE,WAAK;AADD;AADiB,GAAzB;AAKD,CAxBD","file":"parsers.test.js","sourcesContent":["import test from 'ava';\nimport xform from './index';\n\ntest('Get value', t => {\n  const example = xform({\n    noDefault: xform.value(),\n    unusedDefault: xform.value('x'),\n    usedDefault: xform.value('c'),\n    undefDefault: xform.value()\n  });\n\n  const transformed = example({\n    noDefault: 'a',\n    unusedDefault: 'b'\n  });\n\n  t.deepEqual(transformed, {\n    noDefault: 'a',\n    unusedDefault: 'b',\n    usedDefault: 'c',\n    undefDefault: undefined\n  });\n});\n\ntest('Memo and exclude', t => {\n  const example = xform({\n    exclude: xform.exclude({\n      deep: {\n        value: xform.memo('deepValue')\n      }\n    }),\n    shallow: xform.memoValue('deepValue')\n  });\n\n  const transformed = example({\n    exclude: {\n      deep: {\n        value: 'c'\n      }\n    }\n  });\n\n  t.deepEqual(transformed, {\n    shallow: 'c'\n  });\n});\n\ntest('JSONPath', t => {\n  const example = xform({\n    root: xform.path('$.deep.value')\n  });\n\n  const transformed = example({\n    root: {\n      deep: {\n        value: 'a'\n      }\n    }\n  });\n\n  t.deepEqual(transformed, {\n    root: 'a'\n  });\n});\n\ntest('JSONPath subtemplates', t => {\n  const example = xform({\n    root: xform.path('$.deep.value', {\n      sub: xform.path('$.template')\n    })\n  });\n\n  const transformed = example({\n    root: {\n      deep: {\n        value: {\n          sub: {\n            template: 'a'\n          }\n        }\n      }\n    }\n  });\n\n  t.deepEqual(transformed, {\n    root: {\n      sub: 'a'\n    }\n  });\n});\n"]}