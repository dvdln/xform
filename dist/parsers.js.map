{"version":3,"sources":["../lib/parsers.js"],"names":["value","src","dest","key","defaultValue","memo","data","set","name","memoValue","dataKey","has","get","exclude","template","path","pathExpression"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;AAGO,IAAMA,wBAAQ,SAARA,KAAQ;AAAA,SAAgB,UAACC,GAAD,EAAMC,IAAN,EAAYC,GAAZ,EAAoB;AACvDD,SAAKC,GAAL,IAAY,OAAOF,GAAP,KAAe,WAAf,GAA6BG,YAA7B,GAA4CH,GAAxD;AACD,GAFoB;AAAA,CAAd;;AAIP;;;AAGO,IAAMI,sBAAO,SAAPA,IAAO;AAAA,SAAQ,UAACJ,GAAD,EAAMC,IAAN,EAAYC,GAAZ,EAAiBG,IAAjB,EAA0B;AACpDA,SAAKC,GAAL,WAAiBC,IAAjB,EAAyBP,GAAzB;AACD,GAFmB;AAAA,CAAb;;AAIP;;;;AAIO,IAAMQ,gCAAY,SAAZA,SAAY,CAACD,IAAD,EAAOJ,YAAP,EAAwB;AAC/C,MAAIM,oBAAkBF,IAAtB;;AAEA,SAAO,UAACP,GAAD,EAAMC,IAAN,EAAYC,GAAZ,EAAiBG,IAAjB,EAA0B;AAC/BJ,SAAKC,GAAL,IAAYG,KAAKK,GAAL,CAASD,OAAT,IAAoBJ,KAAKM,GAAL,CAASF,OAAT,CAApB,GAAwCN,YAApD;AACD,GAFD;AAGD,CANM;;AAQP;;;AAGO,IAAMS,4BAAU,SAAVA,OAAU;AAAA,SAAY,UAACZ,GAAD,EAAMC,IAAN,EAAYC,GAAZ,EAAiBG,IAAjB,EAA0B;AAC3D,8BAAUQ,QAAV,EAAoBb,GAApB,EAAyBK,IAAzB;AACD,GAFsB;AAAA,CAAhB;;AAIP;;;;AAIO,IAAMS,sBAAO,SAAPA,IAAO,CAACC,cAAD,EAAiBF,QAAjB;AAAA,SAA8B,UAACb,GAAD,EAAMC,IAAN,EAAYC,GAAZ,EAAiBG,IAAjB,EAA0B;AAC1E,QAAIN,QAAQ,mBAASA,KAAT,CAAeC,GAAf,EAAoBe,cAApB,CAAZ;AACAd,SAAKC,GAAL,IAAYW,WAAW,0BAAUA,QAAV,EAAoBd,KAApB,EAA2BM,IAA3B,CAAX,GAA8CN,KAA1D;AACD,GAHmB;AAAA,CAAb","file":"parsers.js","sourcesContent":["import jsonpath from 'jsonpath';\nimport {transform} from './transform';\n\n/**\n * @param {*} [defaultValue]\n */\nexport const value = defaultValue => (src, dest, key) => {\n  dest[key] = typeof src === 'undefined' ? defaultValue : src;\n};\n\n/**\n * @param {string} name\n */\nexport const memo = name => (src, dest, key, data) => {\n  data.set(`memo.${name}`, src);\n};\n\n/**\n * @param {string} name\n * @param {*} [defaultValue]\n */\nexport const memoValue = (name, defaultValue) => {\n  let dataKey = `memo.${name}`;\n\n  return (src, dest, key, data) => {\n    dest[key] = data.has(dataKey) ? data.get(dataKey) : defaultValue;\n  };\n};\n\n/**\n * @param {Object} template\n */\nexport const exclude = template => (src, dest, key, data) => {\n  transform(template, src, data);\n};\n\n/**\n * @param {string} pathExpression\n * @param {Object} template\n */\nexport const path = (pathExpression, template) => (src, dest, key, data) => {\n  let value = jsonpath.value(src, pathExpression);\n  dest[key] = template ? transform(template, value, data) : value;\n};\n"]}